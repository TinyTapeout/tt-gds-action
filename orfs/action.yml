name: 'Tiny Tapeout GDS Action'
description: 'This action builds a GDS file from your Tiny Tapeout project'
branding:
  color: purple
  icon: layers

inputs:
  tools-repo:
    description: 'Override tt-support-tools repository'
    default: 'TinyTapeout/tt-support-tools'
    required: false
    type: string
  tools-ref:
    description: 'Override tt-support-tools branch/tag/commit'
    default: 'tt09'
    required: false
    type: string

runs:
  using: 'composite'
  steps:
    - name: Set up environment variables
      shell: bash
      run: |
        sed 's/^ *//' << EOF >> $GITHUB_ENV
          FLOW=orfs
          FLOW_ARG=--orfs
          IHP_PDK_ROOT=${{ github.workspace }}/pdk
          IHP_PDK_COMMIT=69c58d9ba56d8894c1499b2dd2689f5e22692704
          ORFS_ROOT=${{ github.workspace }}/orfs
          ORFS_COMMIT=ad1c669e5bfaf57b2b6e9c017c7255182d461190
        EOF

    # Install packages for 'Render PNG from GDS' step:
    - name: Install prerequisites
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: librsvg2-bin pngquant # librsvg2-bin for rsvg-convert; pngquant for heavy PNG compression.
        version: tt09 # I think naming a version builds a reusable packages cache for that name.

    - name: Checkout tt-support-tools repo
      uses: actions/checkout@v4
      with:
        repository: "${{ inputs.tools-repo }}"
        path: tt
        ref: "${{ inputs.tools-ref }}"

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # caching pip dependencies

    - name: Install tt-support-tools dependencies
      shell: bash
      run: pip install -r tt/requirements.txt

    - name: Fetch verilog and build config
      shell: bash
      run: ./tt/tt_tool.py --create-user-config $FLOW_ARG

    - name: Install OpenROAD
      shell: bash
      run: |
        wget https://github.com/Precision-Innovations/OpenROAD/releases/download/2024-09-05/openroad_2.0_amd64-ubuntu22.04-2024-09-05.deb
        sudo apt-get install -y ./openroad_2.0_amd64-ubuntu22.04-2024-09-05.deb
        echo "OPENROAD_EXE=$(command -v openroad)" >> $GITHUB_ENV

    - name: Install KLayout
      shell: bash
      run: |
        wget https://www.klayout.org/downloads/Ubuntu-22/klayout_0.29.7-1_amd64.deb
        sudo apt-get install -y ./klayout_0.29.7-1_amd64.deb
        pip install klayout==0.29.7

    - name: 'Install yosys (oss-cad-suite)'
      shell: bash
      run: |
        cd /opt
        wget https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2024-09-23/oss-cad-suite-linux-x64-20240923.tgz
        tar zxf oss-cad-suite-linux-x64-20240923.tgz && rm oss-cad-suite-linux-x64-20240923.tgz
        echo "YOSYS_EXE=/opt/oss-cad-suite/bin/yosys" >> $GITHUB_ENV

    - name: Check out ORFS
      uses: actions/checkout@v4
      with:
        repository: The-OpenROAD-Project/OpenROAD-flow-scripts
        ref: ${{ env.ORFS_COMMIT }}
        path: ${{ env.ORFS_ROOT }}

    - name: Check out IHP PDK
      uses: actions/checkout@v4
      with:
        repository: IHP-GmbH/IHP-Open-PDK
        ref: ${{ env.IHP_PDK_COMMIT }}
        path: ${{ env.IHP_PDK_ROOT }}

    - name: Patch LVS script in IHP PDK
      shell: bash
      run: patch -d $IHP_PDK_ROOT -p1 < tt/ihp/lvs.patch

    - name: Make GDS
      shell: bash
      run: ./tt/tt_tool.py --harden $FLOW_ARG

    - name: Run DRC
      shell: bash
      run: ./tt/tt_tool.py --run-drc $FLOW_ARG

    - name: Run LVS
      shell: bash
      run: ./tt/tt_tool.py --run-lvs $FLOW_ARG

    - name: Show build files (for debugging)
      shell: bash
      run: find runs/wokwi/

    - name: Linter output
      if: always()
      shell: bash
      run: |
        LINTER_LOG="runs/wokwi/logs/ihp-sg13g2/tt-submission/base/1_1_yosys.log"

        echo "DEBUG LINTER_LOG *$LINTER_LOG*"
        cat $LINTER_LOG
        echo "END DEBUG"

        if [ -s "$LINTER_LOG" ]; then
          set +e
          count_error=$(egrep -i "^%Error"   $LINTER_LOG | wc -l)
          count_warn=$( egrep -i "^%Warning" $LINTER_LOG | wc -l)
          count_other=$(egrep -i "^%"        $LINTER_LOG | egrep -v "%(Warning|Error)" | wc -l)
          set -e

          open=""
          summary=""
          icon=":green_circle:"
          if [ $count_other -gt 0 ]; then
            summary="$count_other message(s)"
            icon=":orange_circle:"
          fi
          if [ $count_warn -gt 0 ]; then
            summary="$count_warn warning(s)"
            icon=":orange_circle:"
          fi
          if [ $count_error -gt 0 ]; then
            summary="$count_error error(s)"
            icon=":red_circle:"
            open="open"
          fi
          if [ -n "$summary" ]; then
            summary="[$summary]"
          fi

          echo "<details ${open}>" >> $GITHUB_STEP_SUMMARY
          echo "<summary><h1>Linter output&nbsp;&nbsp;<h4>${summary} ${icon}</h4></h1></summary>" >> $GITHUB_STEP_SUMMARY
          echo "<pre>" >> $GITHUB_STEP_SUMMARY
          # Print each line of the file preceeded by four spaces:
          sed 's/^/    /' < $LINTER_LOG >> $GITHUB_STEP_SUMMARY
          echo "</pre>" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Yosys warnings
      shell: bash
      run: ./tt/tt_tool.py --print-warnings $FLOW_ARG >> $GITHUB_STEP_SUMMARY

    - name: Routing summary
      shell: bash
      run: ./tt/tt_tool.py --print-stats $FLOW_ARG >> $GITHUB_STEP_SUMMARY

    - name: Cell usage summary
      shell: bash
      run: ./tt/tt_tool.py --print-cell-category $FLOW_ARG >> $GITHUB_STEP_SUMMARY

    - name: Publish build logs
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: GDS_logs
        path: |
          src/*
          runs/wokwi/*

    - name: Prepare tt_submission artifact
      shell: bash
      run: |
        mkdir -p tt_submission
        mkdir -p tt_submission/stats
        TOP_MODULE=$(./tt/tt_tool.py --print-top-module $FLOW_ARG)
        cp runs/wokwi/results/ihp-sg13g2/tt-submission/base/commit_id.json tt_submission/
        cp runs/wokwi/results/ihp-sg13g2/tt-submission/base/6_final.gds tt_submission/${TOP_MODULE}.gds
        cp runs/wokwi/results/ihp-sg13g2/tt-submission/base/${TOP_MODULE}.lef tt_submission/
        cp runs/wokwi/results/ihp-sg13g2/tt-submission/base/6_final.spef tt_submission/${TOP_MODULE}.spef
        cp runs/wokwi/results/ihp-sg13g2/tt-submission/base/6_final.v tt_submission/${TOP_MODULE}.v
        cp runs/wokwi/tool_versions.json tt_submission/
        cp runs/wokwi/results/ihp-sg13g2/tt-submission/base/metrics.csv tt_submission/stats/metrics.csv
        cp runs/wokwi/reports/ihp-sg13g2/tt-submission/base/synth_stat.txt tt_submission/stats/synthesis-stats.txt

    - name: Publish tt_submission artifact
      uses: actions/upload-artifact@v4
      with:
        name: tt_submission
        path: |
          src/*
          docs/*
          tt_submission/*
          info.yaml
          LICENSE

    # Create and store PNG...
    - name: Render PNG from GDS
      shell: bash
      run: './tt/tt_tool.py --create-png $FLOW_ARG 2>&1 || echo "WARNING: Failed to render PNG preview from GDS; error $?"'

    - name: Upload gds_render (png) artifact
      uses: actions/upload-artifact@v4
      with:
        name: gds_render
        path: 'gds_render.png'
