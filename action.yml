name: 'Tiny Tapeout GDS Action'
description: 'This action builds a GDS file from your Tiny Tapeout project'
branding:
  color: purple
  icon: layers

inputs:
  tools-repo:
    description: 'Override tt-support-tools repository'
    default: 'TinyTapeout/tt-support-tools'
    required: false
    type: string
  tools-ref:
    description: 'Override tt-support-tools branch/tag/commit'
    default: 'ttihp25a'
    required: false
    type: string
  flow:
    description: 'Flow used for hardening the chip'
    default: 'openlane2'
    required: false
    type: choice
    options:
      - 'openlane2'
  pdk:
    description: 'PDK used for hardening the chip'
    required: true
    type: choice
    options:
      - 'sky130'
      - 'ihp'

runs:
  using: 'composite'
  steps:
    - name: Set up environment variables
      shell: bash
      run: |
        if [ "${{ inputs.pdk }}" == "sky130" ]; then
          sed 's/^ *//' << __EOF >> $GITHUB_ENV
            OPENLANE2_TAG=2.2.9
            PDK_ROOT=/home/runner/pdk
            PDK=sky130A
            TT_ARGS=
        __EOF
        elif [ "${{ inputs.pdk }}" == "ihp" ]; then
          sed 's/^ *//' << __EOF >> $GITHUB_ENV
            OPENLANE_IMAGE_OVERRIDE=htms/openlane2:ihp-v3.0.0.dev17
            PDK_ROOT=$GITHUB_WORKSPACE/pdk
            PDK=ihp-sg13g2
            TT_ARGS=--ihp
        __EOF
        fi

    # Install packages for 'Render PNG from GDS' step and ghdl to process VHDL files:
    - name: Install prerequisites
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: librsvg2-bin pngquant ghdl-llvm # librsvg2-bin for rsvg-convert; pngquant for heavy PNG compression.
        version: tt10 # I think naming a version builds a reusable packages cache for that name.

    - name: Checkout tt-support-tools repo
      uses: actions/checkout@v4
      with:
        repository: "${{ inputs.tools-repo }}"
        ref: "${{ inputs.tools-ref }}"
        path: tt

    - name: Checkout IHP PDK repo
      if: ${{ inputs.pdk == 'ihp' }}
      uses: actions/checkout@v4
      with:
        repository: 'TinyTapeout/IHP-Open-PDK'
        ref: 'tt2025'
        path: pdk

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # caching pip dependencies

    - name: Install tt-support-tools dependencies
      shell: bash
      run: pip install -r tt/requirements.txt

    - name: Fetch verilog and build config
      shell: bash
      run: ./tt/tt_tool.py --create-user-config $TT_ARGS

    - name: Install OpenLane
      if: ${{ inputs.pdk == 'sky130' }}
      shell: bash
      run: pip install openlane==$OPENLANE2_TAG

    - name: Install OpenLane (IHP branch)
      if: ${{ inputs.pdk == 'ihp' }}
      shell: bash
      run: |
        pip install https://github.com/TinyTapeout/libparse-python/releases/download/0.3.1-dev1/libparse-0.3.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl
        pip install https://github.com/TinyTapeout/openlane2/releases/download/ihp-v3.0.0.dev17/openlane-3.0.0.dev17-py3-none-any.whl

    - name: Make GDS with OpenLane
      shell: bash
      run: ./tt/tt_tool.py --harden $TT_ARGS

    - name: Show build files (for debugging)
      shell: bash
      run: find runs/wokwi/

    - name: Linter output
      if: always()
      shell: bash
      run: |
        LINTER_LOG=(runs/wokwi/*-verilator-lint/verilator-lint.log)
        LINTER_LOG=${LINTER_LOG[0]}

        echo "DEBUG LINTER_LOG *$LINTER_LOG*"
        cat $LINTER_LOG
        echo "END DEBUG"

        if [ -s "$LINTER_LOG" ]; then
          set +e
          count_error=$(egrep -i "^%Error"   $LINTER_LOG | wc -l)
          count_warn=$( egrep -i "^%Warning" $LINTER_LOG | wc -l)
          count_other=$(egrep -i "^%"        $LINTER_LOG | egrep -v "%(Warning|Error)" | wc -l)
          set -e

          open=""
          summary=""
          icon=":green_circle:"
          if [ $count_other -gt 0 ]; then
            summary="$count_other message(s)"
            icon=":orange_circle:"
          fi
          if [ $count_warn -gt 0 ]; then
            summary="$count_warn warning(s)"
            icon=":orange_circle:"
          fi
          if [ $count_error -gt 0 ]; then
            summary="$count_error error(s)"
            icon=":red_circle:"
            open="open"
          fi
          if [ -n "$summary" ]; then
            summary="[$summary]"
          fi

          echo "<details ${open}>" >> $GITHUB_STEP_SUMMARY
          echo "<summary><h1>Linter output&nbsp;&nbsp;<h4>${summary} ${icon}</h4></h1></summary>" >> $GITHUB_STEP_SUMMARY
          echo "<pre>" >> $GITHUB_STEP_SUMMARY
          # Print each line of the file preceeded by four spaces:
          sed 's/^/    /' < $LINTER_LOG >> $GITHUB_STEP_SUMMARY
          echo "</pre>" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Yosys warnings
      shell: bash
      run: ./tt/tt_tool.py --print-warnings $TT_ARGS >> $GITHUB_STEP_SUMMARY

    - name: Routing summary
      shell: bash
      run: ./tt/tt_tool.py --print-stats $TT_ARGS >> $GITHUB_STEP_SUMMARY

    - name: Cell usage summary
      shell: bash
      run: ./tt/tt_tool.py --print-cell-category $TT_ARGS >> $GITHUB_STEP_SUMMARY

    - name: Publish build logs
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: GDS_logs
        path: |
          src/*
          runs/wokwi/*

    - name: Install KLayout
      shell: bash
      run: |
        wget https://github.com/TinyTapeout/klayout/releases/download/v0.29.11/klayout_0.29.11-1_amd64.deb
        sudo apt-get update && sudo apt-get install -y ./klayout_0.29.11-1_amd64.deb
        pip install klayout==0.29.11

    - name: Prepare tt_submission artifact
      shell: bash
      run: |
        mkdir -p tt_submission
        mkdir -p tt_submission/stats
        TOP_MODULE=$(./tt/tt_tool.py --print-top-module $TT_ARGS)
        cp runs/wokwi/final/commit_id.json tt_submission/
        cp runs/wokwi/final/{gds,lef,spef/*}/${TOP_MODULE}.* tt_submission/
        strm2oas tt_submission/${TOP_MODULE}.gds tt_submission/${TOP_MODULE}.oas
        if [ "$PDK" == "sky130A" ]; then
          cp runs/wokwi/final/pnl/${TOP_MODULE}.pnl.v tt_submission/${TOP_MODULE}.v
        else        
          cp runs/wokwi/final/nl/${TOP_MODULE}.nl.v tt_submission/${TOP_MODULE}.v
        fi
        cp runs/wokwi/{OPENLANE_VERSION,PDK_SOURCES,resolved.json} tt_submission/
        cp runs/wokwi/final/metrics.csv tt_submission/stats/metrics.csv
        cp runs/wokwi/*-yosys-synthesis/reports/stat.rpt tt_submission/stats/synthesis-stats.txt

    - name: Publish tt_submission artifact
      uses: actions/upload-artifact@v4
      with:
        name: tt_submission
        path: |
          src/*
          docs/*
          tt_submission/*
          info.yaml
          LICENSE

    # Create and store PNG...
    - name: Render PNG from GDS
      shell: bash
      run: './tt/tt_tool.py --create-png $TT_ARGS 2>&1 || echo "WARNING: Failed to render PNG preview from GDS; error $?"'

    - name: Upload gds_render (png) artifact
      uses: actions/upload-artifact@v4
      with:
        name: gds_render
        path: 'gds_render.png'
