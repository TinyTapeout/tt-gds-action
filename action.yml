name: 'Tiny Tapeout GDS Action'
description: 'This action builds a GDS file from your Tiny Tapeout project'
branding:
  color: purple
  icon: layers

inputs:
  tools-repo:
    description: 'Override tt-support-tools repository'
    default: 'TinyTapeout/tt-support-tools'
    required: false
    type: string
  tools-ref:
    description: 'Override tt-support-tools branch/tag/commit'
    default: 'tt07'
    required: false
    type: string
  flow:
    description: 'Flow used for hardening the chip'
    default: 'openlane1'
    required: false
    type: choice
    options:
      - openlane1
      - openlane2

runs:
  using: 'composite'
  steps:
    - name: Set up environment variables
      shell: bash
      env:
        FLOW: ${{ inputs.flow }}
      run: |
        # REMINDER: When updating the OpenLane version do not forget to change the PDKs used for
        #           other actions in this repository precheck/action.yml, gl_test/action.yml,
        #           and eqy_test/action.yml
        #           PDK_VERSION=cd1748bb197f9b7af62a54507de6624e30363943
        cat << EOF >> $GITHUB_ENV
        OPENLANE_TAG=2024.04.22
        OPENLANE_IMAGE_NAME=efabless/openlane:2024.04.22
        OPENLANE_ROOT=/home/runner/openlane
        OPENLANE2_TAG=2.0.7
        PDK_ROOT=/home/runner/pdk
        PDK=sky130A
        FLOW=$FLOW
        EOF
        if [ "$FLOW" == "openlane1" ]
        then
          echo "FLOW_ARG=" >> $GITHUB_ENV
        elif [ "$FLOW" == "openlane2" ]
        then
          echo "FLOW_ARG=--openlane2" >> $GITHUB_ENV
        else
          echo "Invalid flow '$FLOW'" >&2
          exit 1
        fi

    # Install packages for 'Render PNG from GDS' step:
    - name: Install prerequisites
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: librsvg2-bin pngquant # librsvg2-bin for rsvg-convert; pngquant for heavy PNG compression.
        version: tt07 # I think naming a version builds a reusable packages cache for that name.

    - name: Checkout tt-support-tools repo
      uses: actions/checkout@v4
      with:
        repository: "${{ inputs.tools-repo }}"
        path: tt
        ref: "${{ inputs.tools-ref }}"

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # caching pip dependencies

    - name: Install tt-support-tools dependencies
      shell: bash
      run: pip install -r tt/requirements.txt

    - name: Fetch verilog and build config
      shell: bash
      run: ./tt/tt_tool.py --create-user-config $FLOW_ARG

    - name: Install OpenLane
      shell: bash
      run: |
        if [ "$FLOW" == "openlane1" ]
        then
          git clone --depth=1 --branch $OPENLANE_TAG https://github.com/The-OpenROAD-Project/OpenLane.git $OPENLANE_ROOT
          cd $OPENLANE_ROOT
          make
        elif [ "$FLOW" == "openlane2" ]
        then
          pip install openlane==$OPENLANE2_TAG
        fi

    - name: Make GDS with OpenLane
      shell: bash
      run: ./tt/tt_tool.py --harden $FLOW_ARG

    - name: Show build files (for debugging)
      shell: bash
      run: find runs/wokwi/

    - name: Linter output
      if: always()
      shell: bash
      run: |
        if [ "$FLOW" == "openlane1" ]
        then
          LINTER_LOG="runs/wokwi/logs/synthesis/linter.log"
        elif [ "$FLOW" == "openlane2" ]
        then
          LINTER_LOG="runs/wokwi/*-verilator-lint/verilator-lint.log"
        fi

        LINTER_LOG=($LINTER_LOG)
        LINTER_LOG="${LINTER_LOG[0]}"

        echo "DEBUG LINTER_LOG *$LINTER_LOG*"
        cat $LINTER_LOG
        echo "END DEBUG"

        if [ -s "$LINTER_LOG" ]; then
          set +e
          count_error=$(egrep -i "^%Error"   $LINTER_LOG | wc -l)
          count_warn=$( egrep -i "^%Warning" $LINTER_LOG | wc -l)
          count_other=$(egrep -i "^%"        $LINTER_LOG | egrep -v "%(Warning|Error)" | wc -l)
          set -e

          open=""
          summary=""
          icon=":green_circle:"
          if [ $count_other -gt 0 ]; then
            summary="$count_other message(s)"
            icon=":orange_circle:"
          fi
          if [ $count_warn -gt 0 ]; then
            summary="$count_warn warning(s)"
            icon=":orange_circle:"
          fi
          if [ $count_error -gt 0 ]; then
            summary="$count_error error(s)"
            icon=":red_circle:"
            open="open"
          fi
          if [ -n "$summary" ]; then
            summary="[$summary]"
          fi

          echo "<details ${open}>" >> $GITHUB_STEP_SUMMARY
          echo "<summary><h1>Linter output&nbsp;&nbsp;<h4>${summary} ${icon}</h4></h1></summary>" >> $GITHUB_STEP_SUMMARY
          echo "<pre>" >> $GITHUB_STEP_SUMMARY
          # Print each line of the file preceeded by four spaces:
          sed 's/^/    /' < $LINTER_LOG >> $GITHUB_STEP_SUMMARY
          echo "</pre>" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Yosys warnings
      shell: bash
      run: ./tt/tt_tool.py --print-warnings $FLOW_ARG >> $GITHUB_STEP_SUMMARY

    - name: Routing summary
      shell: bash
      run: ./tt/tt_tool.py --print-stats $FLOW_ARG >> $GITHUB_STEP_SUMMARY

    - name: Cell usage summary
      shell: bash
      run: ./tt/tt_tool.py --print-cell-category $FLOW_ARG >> $GITHUB_STEP_SUMMARY

    - name: Publish build logs
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: GDS_logs
        path: |
          src/*
          runs/wokwi/*

    - name: Prepare tt_submission artifact
      shell: bash
      run: |
        mkdir -p tt_submission
        mkdir -p tt_submission/stats
        if [ "$FLOW" == "openlane1" ]
        then
          TOP_MODULE=$(./tt/tt_tool.py --print-top-module)
          cp runs/wokwi/results/final/commit_id.json tt_submission/
          cp runs/wokwi/results/final/{gds,lef,spef}/${TOP_MODULE}.* tt_submission/
          cp runs/wokwi/results/final/verilog/gl/${TOP_MODULE}.v tt_submission/
          cp runs/wokwi/{OPENLANE_VERSION,PDK_SOURCES,config.tcl} tt_submission/
          cp runs/wokwi/reports/metrics.csv tt_submission/stats/metrics.csv
          cp runs/wokwi/reports/synthesis/1-synthesis.AREA_0.stat.rpt tt_submission/stats/synthesis-stats.txt
        elif [ "$FLOW" == "openlane2" ]
        then
          TOP_MODULE=$(./tt/tt_tool.py --print-top-module --openlane2)
          cp runs/wokwi/final/commit_id.json tt_submission/
          cp runs/wokwi/final/{gds,lef,spef/*}/${TOP_MODULE}.* tt_submission/
          cp runs/wokwi/final/pnl/${TOP_MODULE}.pnl.v tt_submission/${TOP_MODULE}.v
          cp runs/wokwi/{OPENLANE_VERSION,PDK_SOURCES,resolved.json} tt_submission/
          cp runs/wokwi/final/metrics.csv tt_submission/stats/metrics.csv
          cp runs/wokwi/*-yosys-synthesis/reports/stat.log tt_submission/stats/synthesis-stats.txt
        fi

    - name: Publish tt_submission artifact
      uses: actions/upload-artifact@v4
      with:
        name: tt_submission
        path: |
          src/*
          docs/*
          tt_submission/*
          info.yaml
          LICENSE

    # Create and store PNG...
    - name: Render PNG from GDS
      shell: bash
      run: './tt/tt_tool.py --create-png $FLOW_ARG 2>&1 || echo "WARNING: Failed to render PNG preview from GDS; error $?"'

    - name: Upload gds_render (png) artifact
      uses: actions/upload-artifact@v4
      with:
        name: gds_render
        path: 'gds_render.png'
