name: 'Tiny Tapeout GDS Action (OpenLane 2)'
description: 'This action builds a GDS file from your Tiny Tapeout project using OpenLane 2'
branding:
  color: purple
  icon: layers

inputs:
  openlane-tag:
    description: 'OpenLane 2 version to use (git tag or commit hash - e.g. "2.0.0b17")'
    default: '2.0.0b17'
  skip-reports:
    description: 'Skip generating reports (yosys warnings, routing, cell usage)'
    default: false

runs:
  using: 'composite'
  steps:
    - name: Set up environment variables
      shell: bash
      run: |
        cat << EOF >> $GITHUB_ENV
        OPENLANE_TAG=${{ inputs.openlane-tag }}
        OPENLANE_ROOT=$GITHUB_WORKSPACE/openlane
        PDK=sky130A
        EOF

    # Install packages for 'Render PNG from GDS' step:
    - name: Install prerequisites
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: librsvg2-bin pngquant # librsvg2-bin for rsvg-convert; pngquant for heavy PNG compression.
        version: tt06 # I think naming a version builds a reusable packages cache for that name.

    - name: Checkout tt-support-tools repo
      uses: actions/checkout@v4
      with:
        repository: tinytapeout/tt-support-tools
        path: tt
        ref: tt06

    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip' # caching pip dependencies

    - name: Install tt-support-tools dependencies
      shell: bash
      run: pip install -r tt/requirements.txt

    - name: Fetch verilog and build config
      shell: bash
      run: ./tt/tt_tool.py --create-user-config

    - name: Checkout OpenLane 2 repo
      uses: actions/checkout@v4
      with:
        repository: efabless/openlane2
        path: ${{ env.OPENLANE_ROOT }}
        ref: ${{ env.OPENLANE_TAG }}

    - uses: cachix/install-nix-action@v25

    - uses: cachix/cachix-action@v14
      with:
        name: openlane
        extraPullNames: openlane

    - name: Make GDS with OpenLane 2
      shell: bash
      run: |
        if [ -f build.py ]; then
          nix-shell $OPENLANE_ROOT/shell.nix --run "python build.py"
        else
          nix-shell $OPENLANE_ROOT/shell.nix --run "python -m openlane --run-tag wokwi config.json"
        fi

        # The next command doesn't really harden, it only creates the required commit_id.json file:
        ./tt/tt_tool.py --harden --openlane2

    - name: Show build files (for debugging)
      shell: bash
      run: find runs/wokwi/

    - name: Yosys warnings
      if: ${{ !inputs.skip-reports }}
      shell: bash
      run: ./tt/tt_tool.py --print-warnings --openlane2 >> $GITHUB_STEP_SUMMARY

    - name: Routing summary
      if: ${{ !inputs.skip-reports }}
      shell: bash
      run: echo Routing summary is not yet available for OpenLane 2 >> $GITHUB_STEP_SUMMARY
      #run: ./tt/tt_tool.py --print-stats --openlane2 >> $GITHUB_STEP_SUMMARY

    - name: Cell usage summary
      if: ${{ !inputs.skip-reports }}
      shell: bash
      run: ./tt/tt_tool.py --print-cell-category --openlane2 >> $GITHUB_STEP_SUMMARY

    - name: Publish build logs
      if: success() || failure()
      uses: actions/upload-artifact@v4
      with:
        name: GDS_logs
        path: |
          src/*
          runs/wokwi/*

    - name: Prepare tt_submission artifact
      shell: bash
      run: |
        mkdir -p tt_submission
        TOP_MODULE=$(./tt/tt_tool.py --print-top-module)
        cp runs/wokwi/final/commit_id.json tt_submission/
        cp runs/wokwi/final/{gds,lef,spef/*}/${TOP_MODULE}.* tt_submission/
        cp runs/wokwi/final/pnl/${TOP_MODULE}.pnl.v tt_submission/${TOP_MODULE}.v
        cp runs/wokwi/{resolved.json,error.log,warning.log,flow.log} tt_submission/
        mkdir -p tt_submission/stats
        cp runs/wokwi/final/metrics.json tt_submission/stats/metrics.json
        cp runs/wokwi/*-yosys-synthesis/reports/stat.json tt_submission/stats/synthesis-stats.json

    - name: Publish tt_submission artifact
      uses: actions/upload-artifact@v4
      with:
        name: tt_submission
        path: |
          src/*
          docs/*
          tt_submission/*
          LICENSE

    # Create and store PNG...
    - name: Render PNG from GDS
      shell: bash
      run: './tt/tt_tool.py --create-png --openlane2 2>&1 || echo "WARNING: Failed to render PNG preview from GDS; error $?"'

    - name: Upload gds_render (png) artifact
      uses: actions/upload-artifact@v4
      with:
        name: gds_render
        path: 'gds_render.png'
